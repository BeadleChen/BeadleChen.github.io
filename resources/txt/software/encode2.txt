<label>Unicode与UTF-8之间的转换</label></br>
通过上一节的例子，可以看到"严"的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。
它们之间的转换可以通过程序实现。</br>
可以通过Editplus的编码功能对文本进行编码.</br>
<span>注意:</span></br>
文本有存储的编码方式和打开的编码方式,
即当打开和存储用的是同一编码时,才不会有乱码.
默认存储方式为当前打开方式的编码.</br>
当然可以通过Save As...另存为来设定文本的存储编码.</br>
<img src="http://cdtyb.img45.wal8.com/img45/523173_20150716152722/14371893673.png" alt="4" border="0" /></br>
里面有选项：ANSI，Unicode，Unicode big endian 和 UTF-8。</br>
1）ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码
（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。</br>
2）Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。
这个选项用的little endian格式。</br>
3）Unicode big endian编码与上一个选项相对应。
我在下一节会解释little endian和big endian的涵义。</br>
4）UTF-8编码，也就是上一节谈到的编码方法。</br>
选择完"编码方式"后，点击"保存"按钮，文件的编码方式就立刻转换好了。</br>
<label>Little endian和Big endian</label></br>
<p>
Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，
4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。
</p>
<p>
Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，
这个字符的名字叫做"零宽度非换行空格"（ZERO WIDTH NO-BREAK SPACE），
用FEFF表示。这正好是两个字节，而且FF比FE大1。
如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；
如果头两个字节是FF FE，就表示该文件采用小头方式。
</p>
<label>实例</label></br>
下面，举一个实例。
打开Editplus，新建一个文本文件，内容就是一个"严"字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式。
然后，用文本编辑的"十六进制功能"，观察该文件的内部编码方式。
1）ANSI：文件的编码就是两个字节"D1 CF"，这正是"严"的GB2312编码，这也暗示GB2312是采用大头方式存储的。</br>
2）Unicode(默认小头)：FF FE 25 4E</br>
3）Unicode big endian：FE FF 4E 25</br>
4）UTF-8 +BOM：EF BB BF E4 B8 A5
5）UTF-8 ：E4 B8 A5</br>



