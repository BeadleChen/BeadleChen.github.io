<p>
前几天在工作中突然需要用到比较复杂的sql语句查询。</br>
今天在自己的博客里做点总结.</br>
</p>
<h3>一、 CASE语句的使用</h3>
<p>
<label>1.1 CASE介绍</label></br> 
 Case具有两种格式。简单Case函数和Case搜索函数。</br>
--简单Case函数</br>
<div class="border_area">
　　CASE  sex</br>
　　　　WHEN '1' THEN '男'</br>
　　　　WHEN '2' THEN '女'</br>
　　ELSE '其他' END</br>
</div>
--Case搜索函数</br>
<div class="border_area">
　　CASE WHEN sex = '1' THEN '男'</br>
　　　　WHEN sex = '2' THEN '女'</br>
　　ELSE '其他' END</br>
</div>
这两种方式，可以实现相同的功能。简单Case函数的写法相对比较简洁，但是和Case搜索函数相比，</br>
功能方面会有些限制，比如写判断式。 </br>
还有一个需要注意的问题，Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略。 </br>
--比如说，下面这段SQL，你永远无法得到“第二类”这个结果</br>
<div class="border_area">
　　CASE WHEN col_1 IN ( 'a', 'b') THEN '第一类'</br>
　　　　WHEN col_1 IN ('a')       THEN '第二类'</br>
　　ELSE'其他' END</br>
</div>
</p>

<h3>二、 CASE用法</h3>
<label>2.1 作为查询结果的判断</label></br>

<p>
CASE可作为类似switch的语句对查询结果进行判断,做出相应的输出。</br>
可这样使用CASE WHEN column1 = 'value' THEN 'value' ELSE 'value' END</br>
</p>
举例:表结构如下</br>
<div class="border_area">
TABLE_NAME: table_a</br>
country|population|name</br>
中国　　|1　　　　|a</br>
美国　　|1　　　　|b</br>
日本　　|5　　　　|a</br>
欧洲　　|5　　　　|c</br>
韩国　　|2　　　　|a</br>
非洲　　|NULL　　|b</br>
</div>
<label>(2.1.1) 多个查询结果的判断</label></br>
<div class="border_area">
SELECT   　　　　　　　　　　　　　　　　　　　　　　　</br>
　　　　country ,　　　　　　　　　　　　　　　　　　　</br>
　　　　(CASE　　　　　　　　　　　　　　　　　　　　</br>
　　　　　　　　WHEN population='1' THEN '合格'　　　</br>
　　　　　　　　WHEN name = 'a' THEN '过关'　　　　　</br>
　　　　　　　　ELSE '不合格'　　　　　　　　　　　　　</br>
　　　　END) as result1,　　　　　　　　　　　　　　　　</br>
　　　　(CASE　　　　　　　　　　　　　　　　　　　　</br>
　　　　　　　　WHEN country='中国' THEN '强大'　　　</br>
　　　　　　　　ELSE '弱小'　　　　　　　　　　　　　　</br>
　　　　END) as result2　　　　　　　　　　　　　　　　</br>
FROM　　　　　　　　　　　　　　　　　　　　　　　　</br>
　　　　table_a;　　　　　　　　　　　　　　　　　　　</br>
</div>
结果:</br>
<div class="border_area">
+---------+---------+---------+</br>
| country | result1 | result2 |</br>
+---------+---------+---------+</br>
| 中国    | 合格    | 强大    |</br>
| 美国    | 合格    | 弱小    |</br>
| 日本    | 过关    | 弱小    |</br>
| 欧洲    | 不合格  | 弱小    |</br>
| 韩国    | 过关    | 弱小    |</br>
| 非洲    | 不合格  | 弱小    |</br>
+---------+---------+---------+</br>
</div>
<label>(2.1.2) CASE语句添加Mysql函数</label></br>
<div class="border_area">
SELECT </br>
　　　　country,</br>
　　　　SUM(CASE </br>
　　　　　　　　　　　　WHEN population='1' THEN '2' </br>
　　　　　　　　　　　　WHEN name = 'a' THEN '3' ELSE '0' </br>
　　　　END) as result,</br>
　　　　CONCAT(</br>
　　　　　　　　MAX(CASE </br>
　　　　　　　　　　　　WHEN population='1' THEN '2' </br>
　　　　　　　　　　　　WHEN name = 'a' THEN '3' ELSE '0' </br>
　　　　　　　　END)</br>
　　　　,'-dog') as result2 </br>
FROM</br>
　　　　table_a;</br>
</div>
结果:</br>
<div class="border_area">
+---------+--------+---------+</br>
| country | result | result2 |</br>
+---------+--------+---------+</br>
| 中国    |     10 | 3-dog   |</br>
+---------+--------+---------+</br>
</div>

<label>(2.1.3) CASE语句内添加聚合函数</label></br>
<div class="border_area">
SELECT </br>
　　　　country,
　　　　CONCAT(</br>
　　　　　　　　(CASE </br>
　　　　　　　　　　　　WHEN MAX(population)=7 THEN '1' </br>
　　　　　　　　　　　　ELSE '2' </br>
　　　　　　　　END)</br>
　　　　,'-dog') as result</br>
FROM</br>
　　　　table_a </br>
GROUP BY</br>
　　　　name;</br>
</div>
结果:</br>
<div class="border_area">
+---------+--------+</br>
| country | result |</br>
+---------+--------+</br>
| 中国    | 1-dog  |</br>
| 美国    | 2-dog  |</br>
| 欧洲    | 2-dog  |</br>
+---------+--------+</br>
</div>
<span>注:</span>CASE语句中内外只能有一个聚合函数，即不能有SUM(CASE COUNT(column) ...)的语句.
</br>
<label>2.2 作为更新语句的内容选择</label></br>
<p>
CASE可作为类似switch的语句对更新内容进行选择,做出相应的更新结果。</br>
</p>
举例:表结构同上</br>
<label>(2.2.1) 作为更新语句的内容选择</label></br>
<div class="border_area">
UPDATE </br>
　　　　table_a </br>
SET </br>
　　　　population= </br>
　　　　　　　　(CASE name </br>
　　　　　　　　　　　　WHEN 'a' THEN population+2 </br>
　　　　　　　　　　　　WHEN 'b' THEN population+4 </br>
　　　　　　　　　　　　ELSE population </br>
　　　　　　　　END);</br>
</div>
结果:</br>
<div class="border_area">
+---------+------------+------+</br>
| country | population | name |</br>
+---------+------------+------+</br>
| 中国    |          1 | a    |</br>
| 美国    |          1 | b    |</br>
| 日本    |          5 | a    |</br>
| 欧洲    |          5 | c    |</br>
| 韩国    |          2 | a    |</br>
| 非洲    | NULL       | b    |</br>
+---------+------------+------+</br>
更新前后变化...........</br>
+---------+------------+------+</br>
| country | population | name |</br>
+---------+------------+------+</br>
| 中国    |          3 | a    |</br>
| 美国    |          5 | b    |</br>
| 日本    |          7 | a    |</br>
| 欧洲    |          5 | c    |</br>
| 韩国    |          4 | a    |</br>
| 非洲    | NULL       | b    |</br>
+---------+------------+------+</br>
</div>
<label>2.3 作为Group By分组的内容</label></br>
<p>
CASE语句还可以作为Group By的依据进行分组,</br>
例如我们希望把时间如'2015-05-07'的时间按季节来分组</br>
在不使用Mysql的QUARTER函数进行判断时，我们可以使用case。</br>
对时间进行月份的判断，区分出季节来。如下:</br>
<div class="border_area">
(CASE </br>
　　　　WHEN (month(createDate)=1 or month(createDate)=2 or month(createDate)=3) then '第一季' </br>
　　　　WHEN(month(createDate)=4 or month(createDate)=5 or month(createDate)=6) then '第二季'</br>
　　　　WHEN(month(createDate)=7 or month(createDate)=8 or month(createDate)=9) then '第三季'</br>
　　　　ELSE '第四季'</br>
END)</br>
</div>
</p>
<label>(2.3.1) 作为Group By分组的内容</label></br>
<div class="border_area">
SELECT </br>
　　　　population,</br>
　　　　(CASE name </br>
　　　　　　　　WHEN 'a' THEN '第一组' </br>
　　　　　　　　WHEN 'b' THEN '第一组' </br>
　　　　　　　　ELSE '第二组' </br>
　　　　END) as result</br>
FROM </br>
　　　　table_a </br>
GROUP BY </br>
　　　　(CASE name </br>
　　　　　　　　WHEN 'a' THEN '第一组' </br>
　　　　　　　　WHEN 'b' THEN '第一组' </br>
　　　　　　　　ELSE '第二组' </br>
　　　　END);</br>
</div>
结果:</br>
<div class="border_area">
+------------+--------+</br>
| population | result |</br>
+------------+--------+</br>
|          1 | 第一组 |</br>
|          5 | 第二组 |</br>
+------------+--------+</br>
</div>